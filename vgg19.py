# -*- coding: utf-8 -*-
"""VGG19.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bW880xNfvArE7UxPzGlNZLihO2Vb7Mne
"""

import matplotlib.pyplot as plt
import numpy as np
import PIL
import tensorflow as tf
from sklearn.metrics import classification_report
from tensorflow.keras.layers import Lambda,Dense,Flatten
from tensorflow.keras.models import Sequential
from tensorflow.keras.optimizers import Adam

from google.colab import drive
drive.mount('/content/drive')

import pathlib

data_dir = pathlib.Path('/content/drive/MyDrive/Datasets/Training')

list_ds = tf.data.Dataset.list_files(str(data_dir/'*/*.jpg'))

unknown = list(data_dir.glob('Rotten/*'))
print(unknown[33])
PIL.Image.open(str(unknown[33]))

img_height,img_width=224,224
batch_size=146
train_ds = tf.keras.preprocessing.image_dataset_from_directory(
  data_dir,
  validation_split=0.2,
  subset="training",
  seed=123,
  interpolation="bilinear",
  image_size=(img_height, img_width),
  batch_size=batch_size)

val_ds = tf.keras.preprocessing.image_dataset_from_directory(
  data_dir,
  validation_split=0.2,
  subset="validation",
  seed=123,
  interpolation="bilinear",
  image_size=(img_height, img_width),
  batch_size=batch_size)

class_names = train_ds.class_names
print(class_names)

import matplotlib.pyplot as plt

plt.figure(figsize=(10, 10))
for images, labels in train_ds.take(1):
  for i in range(9):
    ax = plt.subplot(3, 3, i + 1)
    plt.imshow(images[i].numpy().astype("uint8"))
    plt.title(class_names[labels[i]])
    plt.axis("off")

vgg_model = Sequential()

pretrained_model= tf.keras.applications.VGG19(include_top=False,
                   input_shape=(224,224,3),
                   pooling='avg',classes=4,
                   weights='imagenet')
for layer in pretrained_model.layers:
        layer.trainable=False

vgg_model.add(pretrained_model)

vgg_model.add(Flatten())
vgg_model.add(Dense(512, activation='sigmoid'))
vgg_model.add(Dense(5, activation='softmax'))
vgg_model.summary()

vgg_model.compile(optimizer=Adam(lr=0.001),loss='sparse_categorical_crossentropy',metrics=['accuracy'])

epochs=10
history = vgg_model.fit(train_ds, validation_data=val_ds, epochs=epochs)

def plot_accuracy_loss(history):
    fig=plt.figure(figsize=(7,2))
    fig1 = plt.gcf()
    plt.plot(history.history['accuracy'])
    plt.plot(history.history['val_accuracy'])
    plt.axis(ymin=0.4,ymax=1)
    plt.grid()
    plt.title('train_acc vs val_acc')
    plt.ylabel('Accuracy')
    plt.xlabel('Epochs')
    plt.legend(['train', 'validation'])
    plt.show()
    fig=plt.figure(figsize=(7,2))
    fig1 = plt.gcf()
    plt.plot(history.history['loss'])
    plt.plot(history.history['val_loss'])
    plt.axis(ymin=0.4,ymax=1)
    plt.grid()
    plt.title('train_loss vs val_loss')
    plt.ylabel('Accuracy')
    plt.xlabel('Epochs')
    plt.legend(['train', 'validation'])
    plt.show()

plot_accuracy_loss==1
plot_accuracy_loss(history)

test_loss = vgg_model.evaluate(images, labels)

import cv2
image=cv2.imread(str(unknown[15]))
image_resized= cv2.resize(image, (img_height,img_width))
image=np.expand_dims(image_resized,axis=0)
print(image.shape)

pred=vgg_model.predict(image)
print(pred)

output_class=class_names[np.argmax(pred)]
print("The predicted class is {} ".format(class_names[np.argmax(pred)]))

predictions = vgg_model.predict(images)
# Vector of probabilities
pred_labels = np.argmax(predictions, axis = 1)

from keras.utils.vis_utils import plot_model
print(classification_report(labels, pred_labels))

from sklearn.metrics import confusion_matrix
import seaborn as sns
import matplotlib.pyplot as plt

# assuming you have the true labels in 'y_true' and predicted labels in 'y_pred'
cm = confusion_matrix(labels,pred_labels)
sns.heatmap(cm, annot=True, fmt='d')
plt.xlabel('Predicted')
plt.ylabel('True')
plt.show()

import numpy as np
import matplotlib.pyplot as plt

# Example data
models = ['VGG 19', 'resNet50', 'ResNet101']
class_names = ['Blackspots', 'Fungus', 'Healthy', 'Rotten']

colors = ['orange', 'red', 'black', 'green']
f1_scores = [[0.99,0.99,0.98,0.98 ], [0.88, 0.99, 0.88, 0.94], [0.93, 1.00, 0.90, 1.00]]


f1_scores = np.array(f1_scores)

# Set up the bar graph
bar_width = 0.12
opacity = 0.8
index = np.arange(len(models))

# Create the bar graph for each class
plt.figure(figsize=(15, 8))
for i in range(len(class_names)):
    plt.bar(index + (i-2)*bar_width, f1_scores[:, i], bar_width,
            alpha=opacity,
            color=colors[i],
            label='F1 Score - {}'.format(class_names[i]))

# Add gap between models
plt.xticks(index - bar_width, models)
plt.yticks([.1,.2,.3,.4,.5,.6,.7,.8,.9,1])
# Add x-axis labels, y-axis labels, title, and legend
plt.xlabel('Model')
plt.ylabel('Score')
plt.title('Scores for different models by class')
plt.legend()

plt.show()

import numpy as np
import matplotlib.pyplot as plt

# Example data
models = ['VGG 19', 'resNet50', 'ResNet101']
class_names = ['Blackspots', 'Fungus', 'Healthy', 'Rotten']

colors = ['orange', 'red', 'black', 'green']
f1_scores = [[0.99,0.99,0.98,0.98 ], [0.88, 0.99, 0.88, 0.94], [0.93, 1.00, 0.90, 1.00]]

f1_scores = np.array(f1_scores)

# Set up the line graph
line_width = 2
marker_size = 8
index = np.arange(len(models))

# Create the line graph for each class
plt.figure(figsize=(15, 8))
for i in range(len(class_names)):
    plt.plot(models, f1_scores[:, i], linewidth=line_width,
             marker='o', markersize=marker_size,
             color=colors[i],
             label='F1 Score - {}'.format(class_names[i]))

# Add x-axis labels, y-axis labels, title, and legend
plt.xlabel('Model')
plt.ylabel('Score')
plt.title('Scores for different models by class')
plt.legend()

plt.show()